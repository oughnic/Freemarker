<#ftl output_format="HTML">
<#-- Print the metadata value for a catalogueItem filtered by namespace and key, escape double quotes and trim any whitespace -->
<#-- Input parameters                                                                                                         -->
<#--     catalogueItem - generic Mauro Catalogue Item with metadata                                                           -->
<#--     metaNamespace - Namespace of the metadata profile                                                                    -->
<#--     metaKey - The key identifying the parameter to retrieve                                                              -->

<#macro printMetadata catalogueItem, metaNamespace, metaKey >
<#list catalogueItem.metadata?filter(p -> p.key == metaKey && p.namespace == metaNamespace) as meta>${meta.value?replace("\"","\\\"")?trim}</#list></#macro>

<#macro termSubsection1 class >
<#assign termClause >
<@printMetadata class, "directives.org.iso", "termClause" />
</#assign>
<#if termClause?markup_string?split(".")?size gt 2 >
${(termClause?markup_string?split("."))[1]}<#else>
0</#if>
</#macro>
<#macro relatedClasses dataClass>
<#if dataClass.dataElements??>
<#list dataClass.dataElements?filter(p -> p.dataType.domainType == "ReferenceType") as dataElement >
        {
            "source": "${dataClass.label}",
            "target": "${dataElement.dataType.referenceClass.label}",
            "value": 1,
            "label": "${dataElement.label}"
        }<#sep>,
         </#sep>
</#list>
</#if>
</#macro>
<#macro dumpMetadata catalogueItem>
         <#list catalogueItem.metadata as metadata >
            ${metadata.namespace} - ${metadata.key} - ${metadata.value}
         </#list>
</#macro>
<head>
    <style>
        body {
            margin: 0;
        }
    </style>

    <script src="https://unpkg.com/three"></script>
    <script src="https://unpkg.com/three-spritetext"></script>

    <script src="https://unpkg.com/3d-force-graph"></script>
    <!--<script src="../../dist/3d-force-graph.js"></script>-->

    <script type="application/json" id="3d-contsys">

{
    "nodes": [
<#list dataModel.dataClasses as class >
        {
            "id": "${class.label}",
            "childLinks": [],
            "collapsed": <#if class.label == "health">false<#else>true</#if>,
            "group": <@termSubsection1 class />        }<#sep>,</#sep>
</#list>
       ],
    "links": [
<#list dataModel.dataClasses as class >
    <#if class.dataElements?filter(p -> p.dataType.domainType == "ReferenceType")?size gt 0 >
     <@relatedClasses class /><#sep>,</#sep>
</#if>
</#list>
    ]
}
    </script>
</head>

<body>
    <div id="3d-graph"></div>

    <script>
        const contSysData = JSON.parse(document.getElementById('3d-contsys').innerHTML);
        var rootId = 'health record';


        // link parent/children
        const nodesById = Object.fromEntries(contSysData.nodes.map(node => [node.id, node]));
        contSysData.links.forEach(link => {
            nodesById[link.source].childLinks.push(link);
        });



        let gData = {
            nodes: [],
            links: []
        };

        const getPrunedTree = () => {
            const visibleNodes = [];
            const visibleLinks = [];
            (function traverseTree(node = nodesById[rootId]) {
               
                visibleNodes.push(node);
                // if (node.collapsed) return;

                // Add the links
                visibleLinks.push(...node.childLinks);

                node.childLinks
                    .map(link => ((typeof link.target) === 'object') ? link.target : nodesById[link.target]) // get child node
                    .forEach(childNode => {
                        var found = 0;
                        visibleNodes.forEach(n => {
                            if (n.id == childNode.id) found = 1;
                        });  // End of forEach

                        if (found == 0) {
                            // Add the new concept to the list
                            node.collapsed = false;
                            visibleNodes.push(childNode);
                         
                        };
                    });
                 })();  // End of traverseTree

            let additionalConcepts = { nodes: visibleNodes, links: visibleLinks };

            if (gData.nodes.length > 0) {
               
                gData.nodes.forEach(item => {
                    var found = 0;
                    additionalConcepts.nodes.forEach(ac => {
                        if (item.id == ac.id) found = 1;
                        });
                    if (found ==0) additionalConcepts.nodes.push(item);
                    });
                            
                gData.links.forEach(item => {
                    additionalConcepts.links.push(item);
                    });
                
            };

            gData = additionalConcepts;
            console.log(gData);

            return additionalConcepts;
           
        };


       gData = getPrunedTree();
       console.log(gData);
        const Graph = ForceGraph3D()
            (document.getElementById('3d-graph'))
            .nodeAutoColorBy('group')
            .onNodeDragEnd(node => {
                node.fx = node.x;
                node.fy = node.y;
                node.fz = node.z;
            })
            .onNodeClick(node => {
                if (node.childLinks.length) {
                    // node.collapsed = !node.collapsed; // toggle collapse state
                    rootId = node.id;
                    gData = getPrunedTree();
                    Graph.graphData(gData);
                }
            })
            .onNodeRightClick(node => {
                rootId = node.id;
                gData.nodes = [];
                gData.links = [];
                gData = getPrunedTree();
                Graph.graphData(gData);
            })
            .linkOpacity(0.7)
            .linkWidth(1)
            .linkThreeObjectExtend(true)
            .linkThreeObject(link => {
                // extend link with text sprite
                const sprite = new SpriteText(`$\{link.label}`);
                sprite.color = 'white';
                sprite.textHeight = 4;
                return sprite;
            })
            .linkPositionUpdate((sprite, { start, end }) => {
                const middlePos = Object.assign(...['x', 'y', 'z'].map(c => ({
                    [c]: start[c] + (end[c] - start[c]) / 3 // calc third point
                })));

                // Position sprite
                Object.assign(sprite.position, middlePos);
            })
            .nodeThreeObject(node => {
                const sprite = new SpriteText(node.id.split(" ").join("\n"));
                sprite.material.depthWrite = true; 
                sprite.color = node.color;
                sprite.textHeight = 4;
                return sprite;
            })
            .graphData(gData);

        // Spread nodes a little wider
        Graph.d3Force('charge').strength(-120);

        function updateHighlight() {
            // trigger update of highlighted objects in scene
            Graph
                .nodeColor(Graph.nodeColor())
                .linkWidth(Graph.linkWidth())
                .linkDirectionalParticles(Graph.linkDirectionalParticles());
        }
    </script>
</body>